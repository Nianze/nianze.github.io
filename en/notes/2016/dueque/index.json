{
  "title": "When use Dueque",
  "content": "Deque vs. LinkedList vs. Stack\nQuote From javadoc:\nArrayDeque is likely to be faster than Stack when used as a stack, and faster than LinkedList when used as a queue.\nUse ArrayDeque or LinkedList as queue1 Cons of Linked List Linked structures are the worst structure to iterate with a cache miss on each element Have to allocating a node for each item to insert, which essentially involves JVM/OS and expensive For pop() operation, it mark internal nodes eligible for garbage collection and that\u0026rsquo;s more work behind the scene Pros of Linked List When removing the current element during iteration, LinkedList has better performance Worth to note: LinkedList supports null element When use ArrayDeque as queue if only need to add/remove of both ends, use ArrayDeque e.g.: when using BFS, consider ArrayDeque first. Use ArrayDeque or Stack as Stack2 Deque exposes a set of operations which is all about being able to fetch/add/remove items from the start or end of a collection, iterate etc. There\u0026rsquo;s deliverately no way to access an element by position, which Stack exposes because it\u0026rsquo;s a subclass of Vector, making the Stack inconsistent.\nhttp://stackoverflow.com/questions/6163166/why-is-arraydeque-better-than-linkedlist\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttp://stackoverflow.com/questions/12524826/why-should-i-use-deque-over-stack\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n",
  "summary": "Deque vs. LinkedList vs. Stack\n",
  "date": "2016-10-30T00:00:00Z",
  "lastmod": "2016-10-30T00:00:00Z",
  "permalink": "https://nianze.github.io/en/notes/2016/dueque/",
  "type": "notes",
  "kind": "page",
  "section": "notes",
  "tags": ["algorithm"],
  "categories": ["coding"],
  "series": ["algorithm"]
}
