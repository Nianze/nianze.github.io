{
  "title": "[MECpp]Item-1 Distinguish Between Pointers and References",
  "content": "More effective C++: Use references when we already have something to refer to and never want to refer to anything else, or when implementing operators whose syntactic requires us to do so.\nBoth pointers and references refer to other objects indirectly, and we should distinguish their differences.\nNo null reference A reference must always refer to some object, which implies that references must be initialized:\n1 2 3 4 string\u0026amp; rs; // error! References must be initialized string *ps; // valid but risky uninitialized pointer string s(\u0026#34;abc\u0026#34;); string\u0026amp; rs = s; // fine Having known this, if we have a variable whose purpose is to refer to another object, but it is possible that there might be no object to refer to, we should make the variable a pointer; on the other hand, if the design requires that the variable must always refer to a non-null object, we choose the reference.\nAs an implication, reference\u0026rsquo;s never-nullable property save us from the burden of testing the validity before using it:\n1 2 3 4 5 6 7 8 9 10 11 void printRefDouble(const double\u0026amp; rd) { cout \u0026lt;\u0026lt; rd; // no need to test rd. } void printPointDouble(const double *pd) { if (pd) { // check for null pointer cout \u0026lt;\u0026lt; *p; } } No reassignment for reference Another difference is that we can reassign pointers to refer to different objects, while reference always refers to the one it is initialized:\n1 2 3 4 5 6 7 8 string s1(\u0026#34;Nancy\u0026#34;); string s2(\u0026#34;Clancy\u0026#34;); string\u0026amp; rs = s1; // rs refers to s1 string *ps = s1; // ps points to s1 rs = s2; // rs still refers to s1, but s1\u0026#39;s value updates to \u0026#34;Clancy\u0026#34;, equiv. to *ps = s2 ps = \u0026amp;s2; // ps now points to s2, s1 remains unchanged In general, use pointers when\nit\u0026rsquo;s possible that there\u0026rsquo;s nothing to refer to (set pointers to null), or it\u0026rsquo;s needed to refer to different things at different times (reassign where the pointer points) use reference when we know there will always be an object to refer to and we will never refer to anything else other than the initial object.\nUse reference for some operators Another situation to prefer reference is when we\u0026rsquo;re implementing certain operators such as operator[], which needs to return something that can be used as the target of an assignment:\n1 2 vector\u0026lt;int\u0026gt; v(10); v[5] = 10; // the target of this assignment is the return value of operator[] If operator[] returned a pointer, last statement would be changed to this:\n1 *v[5] = 10; This makes v look like a vector of pointers, which it\u0026rsquo;s not. Thus we may prefer using a reference as the return type of operator[] (for an exception, see MECpp-item 30).\n",
  "summary": "More effective C++: Use references when we already have something to refer to and never want to refer to anything else, or when implementing operators whose syntactic requires us to do so.\n",
  "date": "2018-03-22T16:47:15-04:00",
  "lastmod": "2018-03-22T16:47:15-04:00",
  "permalink": "https://nianze.github.io/en/notes/2018/03/distinguish-between-pointers-and-references/",
  "type": "notes",
  "kind": "page",
  "section": "notes",
  "tags": ["technique","cpp"],
  "categories": ["coding"],
  "series": ["effective c++"]
}
