{
  "title": "Item-6 Disallow unwanted compiler-generated functions",
  "content": "Declare unwanted member functions private without implementations to disallow functionality automatically provided by compilers.\nIf we want to prevent functions such as copy constructor being generated in order to maintain the object uniqueness, explicitly declare the copy constructor and the copy assignment operator private, so that the client of the class will not be able to copy the object.\nTo make it foolproof, declare member functions private and deliberately not implemente them so that member and friend functions will not be able to copy the object, either.\nAnother possible solution to prevent copying is to inherit from a well-designed base class such as this:\n1 2 3 4 5 6 7 8 class Uncopyable { protected: Uncopyable() {} // allow construction of derived objects ~Uncopyable() {} // allow destruction of derived objects private: Uncopyable(const Uncopyable\u0026amp;); // prevent copying Uncopyable\u0026amp; operator=(const Uncopyable\u0026amp;); // prevent copying }; To inherit from the base class, simply:\n1 2 3 class HomeForSale: private Uncopyable { ... // no copy ctor or copy assign. operator declaration }; This will be the same effect as the following design:\n1 2 3 4 5 6 7 8 class HomeForSale{ public: ... private: ... HomeForSale(const HomeForSale\u0026amp;); HomeForSale\u0026amp; operator=(const HomeForSale\u0026amp;); }; There are some subtleties about the implementation and use of Uncopyable:\ninheritance from Uncopyable needn\u0026rsquo;t be public (item 32 and 39) Uncopyable destructor needn\u0026rsquo;t be virtual (item 7: the base class is not designed to be used polymorphically) it\u0026rsquo;s eligible for the empty bass class optimization described in item 39, but use of this technique could lead to multiple inheritance (item 40), which will sometimes in turn disable the empty base class optimization (item 39) Boost (item 55) provides a similar class named noncopyable ",
  "summary": "Declare unwanted member functions private without implementations to disallow functionality automatically provided by compilers.\n",
  "date": "2018-01-24T16:18:59-05:00",
  "lastmod": "2018-01-24T16:18:59-05:00",
  "permalink": "https://nianze.github.io/en/notes/2018/01/functions-silently-created/",
  "type": "notes",
  "kind": "page",
  "section": "notes",
  "tags": ["technique","cpp"],
  "categories": ["coding"],
  "series": ["effective c++"]
}
