{
  "title": "Item-2 Compare <iostream> to <stdio.h>",
  "content": "Some tips about \u0026lt;iostream\u0026gt;\nOne advantage of \u0026lt;iostream\u0026gt; over \u0026lt;stdio.h\u0026gt; (which includes C-style scanf and printf) is that built-in types like int are read and written in the same manner as user-defined types like Rational:\n1 2 3 4 5 int i; Rational r; // r is a user-defined rational number ... cin \u0026gt;\u0026gt; i \u0026gt;\u0026gt; r; cout \u0026lt;\u0026lt; i \u0026lt;\u0026lt; r; So considering type safety and extensibility offered by the classes and functionas in the iosteam library, in general we should prefer \u0026lt;iostream\u0026gt; to \u0026lt;stdio.h\u0026gt;. In order for this code to compile, we mus define operator\u0026gt;\u0026gt; and operator\u0026lt;\u0026lt; for Rational type. A typical output routine may look like this:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 clas Rational { public: Rational (int numerator = 0, int denominator = 1); ... private: int n, d; friend ostream\u0026amp; operator\u0026lt;\u0026lt;(ostream\u0026amp; s, const Rational\u0026amp; r); }; ostream\u0026amp; operator\u0026lt;\u0026lt;(ostream\u0026amp; s, Rational\u0026amp; r) { s \u0026lt;\u0026lt; r.n \u0026lt;\u0026lt; \u0026#39;/\u0026#39; \u0026lt;\u0026lt; r.d; return s; } There are some subtle points worth noting: operator\u0026lt;\u0026lt; is not a member function (explained in item 19) and the Rational object to be output is passed as a reference-to-const rather than as an object (see item 22).\nHowerver, there are still very few situations where \u0026lt;stdio.h\u0026gt; may be more sensible to use:\nSome implementations of iostream operations are less efficient than corresponding C stream operations, so it may make sense for applications requiring extreme performance. During the course of standardization, iostream library was modified in some fundamental ways, so it may make sense for applications targeting at maximum portablility. Since classes of the iostream library have constructors while functions in \u0026lt;stdio.h\u0026gt; do not, when concerning about initialization order of static objects (see item 47) the standard C library may be more useful because you can always call it with impunity. By the way Technically speaking, the standardizatoin committee eliminated \u0026lt;iostream.h\u0026gt; in favor of \u0026lt;iostream\u0026gt; when they truncated the names of the other non-C standard header names, but chances are that most compilers support both of them. However, there is a subtle difference between them:\nwhen #include \u0026lt;iostream\u0026gt;, the iostream library is ensconced within the namespace std (item 28) when #include \u0026lt;iostream.h\u0026gt;, we get the same elements but they are at global scope Thus we usually prefer using \u0026lt;iostream\u0026gt; for name conflicts consideration.\n",
  "summary": "Some tips about \u0026lt;iostream\u0026gt;\n",
  "date": "2018-01-17T19:14:29-05:00",
  "lastmod": "2018-01-17T19:14:29-05:00",
  "permalink": "https://nianze.github.io/en/notes/2018/01/tips-on-iostream/",
  "type": "notes",
  "kind": "page",
  "section": "notes",
  "tags": ["technique","cpp"],
  "categories": ["coding"],
  "series": ["effective c++"]
}
