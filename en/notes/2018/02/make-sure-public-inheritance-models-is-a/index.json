{
  "title": "Item-32 Make sure public inheritance models "Is-A"",
  "content": "Everything that applies to base classes must also apply to derived classes in public inheritance, for every derived class object is a base class object.\nThere are multiple relationships that can exist between classes:\n\u0026ldquo;is-a\u0026rdquo; is talked about in this item. \u0026ldquo;has-a\u0026rdquo; is discussed about in item 38. \u0026ldquo;is-implemented-in-terms-of\u0026rdquo; is introduced in item 39. We should understand the differencea among these relationships.\nFor \u0026ldquo;is-a\u0026rdquo;, we should understand it in this way: if the class D (\u0026ldquo;derived\u0026rdquo;) publicly inherits from class B (\u0026ldquo;base), C++ compilers will assume that every object of type D is also an object of type B, but not vice versa. That is, every D is-a B, but not vice versa 1.\nThe concept of is-a sounds simple, but sometimes our intuition may mislead us. Say we want to create class Square and class Rectangle. I hear you say:\nEverybody knows that a square is a rectangle, but generally not vice versa\nThen consider this code:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class Rectangle { public: virtual void setHeight(int newHeight); virtual void setWidth(int newWidth); virtual int height() const; // return current values virtual int width() const; ... }; void makeBigger(Rectangle\u0026amp; r) // function to increase r\u0026#39;s area { int oldHeight = r.height(); r.setWidth(r.width() + 10); // add 10 to r\u0026#39;s width assert(r.height() == oldHeight); // assert that r\u0026#39;s height is unchanged } 1 2 3 4 5 6 7 class Square: public Rectangle {...}; Square s; ... assert(s.width() == s.height()); // must be true for all squares makeBigger(s); // by inheritance, s is-a Rectangle, so we can increase its area assert(s.width() == s.height()); // must be true for all squares Now we face a big problem: how can we reconcile the following assertion:\nbefore calling makeBigger, s\u0026rsquo;s height is the same as its width; inside makeBigger, s\u0026rsquo;s width is changed, but its height is not; after returning from makeBigger, s\u0026rsquo;s height is again the same as its width Here, the instincts we\u0026rsquo;ve develped in mathematics does not serve well. In this case, something applies to a rectangle is not applicable to a square, but public inheritance asserts that everthing that applies to base class object also applies to derived class objects. Thus using public inheritance to model the relationship between Rectangle and Square is incorrect.\nWith the knowledge of inheritance added into our arsenal of design, we\u0026rsquo;ll have to augment our intuition with new insights to guide us in inheritance\u0026rsquo;s proper application.\nThis is true only for public inheritance. Private inheritance means somethign entirely different (item 39), and protected inheritance is something beyond understanding.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n",
  "summary": "Everything that applies to base classes must also apply to derived classes in public inheritance, for every derived class object is a base class object.\n",
  "date": "2018-02-23T12:59:53-05:00",
  "lastmod": "2018-02-23T12:59:53-05:00",
  "permalink": "https://nianze.github.io/en/notes/2018/02/make-sure-public-inheritance-models-is-a/",
  "type": "notes",
  "kind": "page",
  "section": "notes",
  "tags": ["technique","cpp"],
  "categories": ["coding"],
  "series": ["effective c++"]
}
