<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>binary-search on Nzo&#39;s Blog</title>
    <link>https://nianze.github.io/en/tags/binary-search/</link>
    <description>Recent content in binary-search on Nzo&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>daoxinzhishui@gmail.com (Nzo)</managingEditor>
    <webMaster>daoxinzhishui@gmail.com (Nzo)</webMaster>
    <copyright>Â©2025, All Rights Reserved</copyright>
    <lastBuildDate>Sat, 16 Aug 2025 02:45:44 -0400</lastBuildDate>
    
        <atom:link href="https://nianze.github.io/en/tags/binary-search/index.xml" rel="self" type="application/rss+xml" />
    

      
      <item>
        <title>Algo Review: Binary Search</title>
        <link>https://nianze.github.io/en/notes/2025/08/algo-review-binary-search/</link>
        <pubDate>Sat, 16 Aug 2025 02:45:44 -0400</pubDate>
        <author>daoxinzhishui@gmail.com (Nzo)</author>
        <atom:modified>Sat, 16 Aug 2025 02:45:44 -0400</atom:modified>
        <guid>https://nianze.github.io/en/notes/2025/08/algo-review-binary-search/</guid>
        <description>Mindset model In binary search, key points:
if right is defined as len(nums) - 1, then search space is between [left, right] termination condition: while (left &amp;lt;= right) in each shrinking iteration: left = mid + 1 and right = mid - 1 final state: left == right + 1 if right is defined as len(nums), then search space is between [left, right) termination condition: while (left &amp;lt; right) in each shrinking iteration: left = mid + 1 but right = mid final state: left == right for left bound searching, right = mid (-1) if f(mid) == target, return left (this will be immediate ceiling item if target is not in f(x)) for right bound searching, left = mid + 1 if f(mid) == target, return left - 1 (this will be immediate floor item if target is not in f(x)) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # monotone function def f(x: int) -&amp;gt; int: pass # binary search to get target def binary_search(nums: List[int], target: int) -&amp;gt; int: if len(nums) == 0: return -1 left = .</description>
        
        <dc:creator>Nzo</dc:creator>
        
        <media:content url="https://nianze.github.io/image/2025/08/16/bs.jpg" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
          
            
              <category>algorithm</category>
            
          
            
              <category>binary-search</category>
            
          
        
        
          
            
              <category>coding</category>
            
          
        
        
          
            
              <category>algorithm</category>
            
          
        
      </item>
      

    
  </channel>
</rss>
